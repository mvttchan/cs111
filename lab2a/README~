NAME:	Matthew Chan
EMAIL:	matthew_2185@yahoo.com
ID:	805291212

2.1.1
	It took around 10,000 iterations for threads of all amounts to fail. A thing to
	keep in mind, however, is that the sample size is fairly small, as we can see
	that thread 4 iteration 100 failed while a later test with a higher thread and
	iteration count passed. 8 and 12 thread cases failed on the 1000 mark, much
	earlier than tests with lower thread counts, which is to be expected.
	The processor can compute a small amount of iterations quickly. It takes many
	iterations before errors are seen because now the amount of time to complete
	all the iterations of one thread increases dramatically. There is increased
	contention if a thread is unable to complete all calculations before another
	thread is created. A significantly smaller amount of iterations will allow
	the threads to complete their calculations without other threads interrupting
	for the same resource.

2.1.2
	Yield runs are much slower because of the extra system calls as well as the
	logic that goes behind it. Yielding relinquishes control of the CPU and moves
	the thread to the back of the queue. Effectively, this means that every thread
	must call this function before being able to do a calculation, for every
	calculation. This, in addition to all the context switches, is where all
	the additional time goes. It is not possible to achieve valid per operation
	timings because a lot of the additional time spent does not go towards performing
	the operations, but rather the system calls as well as the context switches.

2.1.3
	Average cost decreases because it is comparable to amortization. When a higher
	ratio of the time is spent doing incredibly fast calculations compared to the
	other overhead from creating threads and joining them, the average cost
	decreases. This question reminds me of a type of math problem, specifically
	finding an asymptotic value as a parameter approaches infinity. In this case,
	the number of iterations should approach infinity, then we can more accurately
	determine what the true cost is.

2.1.4
	The performance is similar for a low number of threads because the critical
	section is not accessed as often, leading to lower contention. As the number of
	threads rise, contention rises which leads to run time slowing down because the
	critical section is accessed more often.

2.2.1
	In part 1, the mutex protected operations have a sharp increase during the
	early stages but levels off. This is due to the fact that the overhead cost
	of creating new threads becomes larger than the cost of the numerous context
	switches. In part 2, the graph maintains a steady slope simply because of
	the increased number of threads. The mutex for list should maintain higher
	values because of the complexity of the driver program, however my graphs
	do not exhibit this.

2.2.2
	Mutex and spinlocks offer a similar time range when there are a low amount
	of working threads, as spinlocks are much more effective in these situations
	as opposed to a large amount of threads. We see that the cost rises
	significantly more than mutex operations as threads increase, this speaks
	to the inefficacy of spinlocks. Spinlocks hold a thread until it requires a
	resource, however mutex locks are much more flexible and a better oft a better
	use of resources.


lab2_add.c:
	A C program that implements a global counter with different kinds of synchronization.	
	Supports mutexes, yielding, CAS, spinlocking, and unprotected services.
lab2_list.c:
	A C program that maintains a shared list with varying synchronization. Mutex,
	spinlocking, yielding, and unprotected services.
SortedList.h:
	A given file describing how we should implement the functions of the list.
SortedList.c:
	The implementation of the given file
Makefile;
	Supports build, test, graph, clean, and dist
lab2_add.csv:
	The output file for test cases for the add.png files
lab2_list.csv:
	Output file to graph the list.png files
lab2_add-1.png:
	Threads and iterations that run without failure, yield and no yield
lab2_add-2.png:
	Cost per operation for threads 2 and 8, yield and no yield
lab2_add-3.png:
	Singular thread operation cost trends
lab2_add-4.png:
	Threads and iterations running without failure, yield, all sync types
lab2_add-5.png:
	Cost per operation, increasing number of threads, all types no yield
lab2_list-1.png:
	Single thread operation costs
lab2_list-2.png:
	Varying sorts of yields, threads and iterations without failure, increasing threads
lab2_list-3.png:
	Protected iterations without failure, varying yields
lab2_list-4.png:
	Mutex vs Spinlock cost per operation
csv_add.sh:
	A script to generate the add csv file
csv_list.sh:
	A script to generate the list csv file
lab2_add.gp:
	A given file to make the add graphs
lab2_list.gp:
	Given file to make list graphs

https://man7.org/linux/man-pages/man2/sched_yield.2.html
	-to understand what sched_yield does